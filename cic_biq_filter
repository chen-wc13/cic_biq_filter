//三级CIC抽取滤波器
//R = 16 , M = 1 , N = 3 , 拓展位长数 = 12, 有效位数13位
module cic_biqfilter(clk, reset,x_in, y_out, y_out1, start);
	input reset, clk;         //输入时钟
	input	x_in;   //输入1位数据
	output [23:0] y_out;    //输出24位数据
	output [23:0] y_out1;
	output	start;
	reg	start;
	reg	flag1, flag2, flag3;
	reg	derived_clk;
	wire	[47:0]x_in2;
	reg	[3:0] counter;
	reg	[10:0] counter2;
	reg	[23:0] IntReg0[1:0],IntReg1[1:0],IntReg2;  
	
	reg	[23:0] ComReg0[2:0],ComReg1[2:0],ComReg2[2:0],ComReg3;  
	//biquad filter reg
	reg	[47:0] xReg0,xReg1,xReg2,yReg1;
	reg	[47:0] xReg10,xReg11,xReg12,yReg11;
	reg [47:0] xplusReg0, yReg0;
	reg [47:0] xplusReg10, yReg10;
	reg [47:0]	b0,b1,b2,a1,a2;
	reg [47:0]	b10,b11,b12,a11,a12;
	initial 
		begin
			ComReg0[0] <= 0;
			ComReg0[1] <= 0;
			ComReg1[0] <= 0;
			ComReg1[1] <= 0;
			ComReg2[0] <= 0;
			ComReg2[1] <= 0;			  
			ComReg3 <= 0;
		end
	//计数器
	always @(posedge clk)
	begin:COUNTER
		if(!reset)
			begin
				counter <= 0;
			end
		else
		  begin 
		    if(counter >= 4)   //生成下采样后的时钟
		      derived_clk = 1;
		    else
				begin
					derived_clk = 0;
				end
		  	counter = counter + 1;
		  end
	end
	
	//积分器实现模块
	always @(posedge clk) 
	  begin: INTEGRATOR
	    if(!reset)
		    begin
		      IntReg0[0] <= 0;
		      IntReg0[1] <= 0;
		      IntReg1[0] <= 0;
		      IntReg1[1] <= 0;
		      IntReg2 <= 0;
		    end
	    else
		    begin
			  IntReg0[0] <= (x_in<<1) - 2'd1 + IntReg0[0];             
			  IntReg0[1] <= IntReg0[0];           //将IntReg0[0]赋值给IntReg0[1]相当于延时
			  IntReg1[0] <= IntReg0[1] + IntReg1[0];
			  IntReg1[1] <= IntReg1[0];
			  IntReg2 <= IntReg1[1] + IntReg2;
			  
			
			end
	  end
	//梳状器实现模块 
	always @(posedge derived_clk)
		begin:COMB
		  if(!reset)
		    begin
			  ComReg0[0] <= 0;
			  ComReg0[1] <= 0;
			  ComReg1[0] <= 0;
			  ComReg1[1] <= 0;
			  ComReg2[0] <= 0;
			  ComReg2[1] <= 0;			  
			  ComReg3 <= 0;
			end
	      else
	        begin 
		      ComReg0[0] <= IntReg2;
				ComReg0[1] <= ComReg0[0];		
		      ComReg1[0] <= ComReg0[0] - ComReg0[1];
		      ComReg1[1] <= ComReg1[0];
		      ComReg2[0] <= ComReg1[0] - ComReg1[1];
		      ComReg2[1] <= ComReg2[0];
		      ComReg3 <= ComReg2[0] - ComReg2[1];

		    end
	    end
	
	assign x_in2 = {ComReg3, 24'd0}; 
	
	
	initial
	begin
		b0=48'h0000000147AE ;	//1
		b1=48'hFFFFFFFDB22D ;	//-1.96
		b2=48'h00000001096C ;	//0.5625
		a1=48'hFFFFFE004189 ;	//
		a2=48'h000000FFBEE4 ;//
		//second filter
		b10=48'h0000000147AE ;	//1
		b11=48'hFFFFFFFDB22D ;	//-1.96
		b12=48'h00000001096C ;	//0.5625
		a11=48'hFFFFFE004189 ;	//
		a12=48'h000000FFBEE4 ;//
		//b0=24'h000100;	//1
		//b1=24'h000100;	//1
		//b2=24'h000040;	//0.25
		//a1=24'hFFFE4D;	//-1.56:FFFE71   -1.7:FFFE4D
		//a2=24'h0000C3;	//0.7625:0000C3	0.8109:0000D0
		
		xReg0 <= 0;
		xReg1 <= 0;
		xReg2 <= 0;
		yReg0 <= 0;
		yReg1 <= 0;
		xplusReg0 <= 0;
		//second filter
		xReg10 <= 0;
		xReg11 <= 0;
		xReg12 <= 0;
		yReg10 <= 0;
		yReg11 <= 0;
		xplusReg10 <= 0;
	end
//滤波器计算
	always @(posedge derived_clk) 
	  begin: cal
	    if(!reset)
		    begin
		     xReg0 <= 0;
			  xReg1 <= 0;
			  xReg2 <= 0;
			  yReg0 <= 0;
			  yReg1 <= 0;
			  xplusReg0 <= 0;
			  //second filter
			  xReg10 <= 0;
			  xReg11 <= 0;
			  xReg12 <= 0;
			  yReg10 <= 0;
			  yReg11 <= 0;
			  xplusReg10 <= 0;
		    end
	    else
		    begin
			  xReg0 <= x_in2;
			  xReg1 <= xReg0;
			  xReg2 <= xReg1;
			  yReg1 <= yReg0;
			  xplusReg0 <= fix_point_mul(xReg0, b0) + fix_point_mul(xReg1, b1) + fix_point_mul(xReg2, b2);
			  yReg0 <= xplusReg0 - fix_point_mul(yReg0, a1) - fix_point_mul(yReg1, a2);
			  //second filter
			  xReg10 <= yReg0;
		     xReg11 <= xReg10;
		     xReg12 <= xReg11;
		     yReg11 <= yReg10;
		     xplusReg10 <= fix_point_mul(xReg10, b10) + fix_point_mul(xReg11, b11) + fix_point_mul(xReg12, b12);
			  yReg10 <= xplusReg10 - fix_point_mul(yReg10, a11) - fix_point_mul(yReg11, a12);
			end
	  
		end
		
		//assign y_out = yReg0;
		assign y_out = yReg10[47:24];
		assign y_out1 = xReg0[47:24];
		
		function [47:0]fix_point_mul;
			input [47:0] a;
			input [47:0] b;
				parameter width_a = 48, width_b = 48, width_out = 48, flt_bit = 24;
				reg flag;
				reg [width_a - 1 : 0] a_true;			//48bit
				reg [width_b - 1 : 0] b_true;			//47bit
				reg [width_a + width_b - 3 : 0] result_long;	//94bit
				reg [width_out - 1 : 0] result;	//48bit
				begin
					if(a == 48'd0 || b == 48'd0) fix_point_mul = 48'd0;
					else
					begin
						a_true = (a[width_a - 1] == 1) ? {a[width_a - 1], ~a[width_a - 2:0] + 1'b1} : a;		//原码 
						b_true = (b[width_b - 1] == 1) ? {b[width_b - 1], ~b[width_b - 2:0] + 1'b1} : b;
						flag = a_true[width_a - 1] ^ b_true[width_b - 1];
						result_long = a_true[width_a - 2:0] * b_true[width_b - 2:0];
						result = {flag, result_long[flt_bit + width_out - 2 : flt_bit]};	
						fix_point_mul = result[width_out - 1] ? {result[width_out - 1], ~result[width_out - 2:0] + 1'b1} : result;
					end		
				end
		
		endfunction
	
	
		initial 
		begin 
			flag1 <= 0;
			flag2 <= 0;
			flag3 <= 0;
		end
	
	always @(posedge derived_clk) 
      begin
			flag1 <= ~flag1; //输出变化，flag1取反
		end

	always @(posedge clk)
		begin
			if(!reset)
				begin
					start <= 0;
					counter2 <= 0;
				end
			else
			  begin
				if(flag2 != flag1) flag3 <= 1;	//检测到flag1变化，即检测到输出y_out变化
				if(flag3)
					begin
						counter2 <= counter2 + 11'd1; 	//计数
						if(counter2 >= 2)	start = 1;	 //y_out发生改变10个时钟后start上升沿
						if(counter2 >= 4) 					 //y_out发生改变50个时钟后start下降沿
							begin
								start <= 0;
								flag3 <= 0;
							end
					end
				else										//输出无变化，都置零
					begin
						start <= 0;
						counter2 <= 0;
					end
				flag2 <= flag1;	//相当于一个延时，检测一个时钟前后flag1是否有变化		
			  end
		end
	
	
endmodule    






    


















